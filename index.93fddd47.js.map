{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = null){\n        this.size = 4;\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    createEmptyBoard() {\n        return Array.from({\n            length: this.size\n        }, ()=>Array(this.size).fill(0));\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            const newTile = Math.random() < 0.9 ? 2 : 4;\n            this.board[row][col] = newTile;\n        }\n    }\n    restart() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile(); // Add two tiles at the start\n    }\n    start() {\n        if (this.status === \"idle\") this.restart();\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    canMove() {\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            if (this.board[row][col] === 0) return true;\n            if (col < this.size - 1 && this.board[row][col] === this.board[row][col + 1]) return true;\n            if (row < this.size - 1 && this.board[row][col] === this.board[row + 1][col]) return true;\n        }\n        return false;\n    }\n    rotateBoard(clockwise = true) {\n        const newBoard = this.createEmptyBoard();\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (clockwise) newBoard[col][this.size - row - 1] = this.board[row][col];\n            else newBoard[this.size - col - 1][row] = this.board[row][col];\n        }\n        this.board = newBoard;\n    }\n    slideAndMergeRow(row) {\n        const newRow = row.filter((val)=>val !== 0);\n        for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            newRow[i + 1] = 0;\n            this.score += newRow[i];\n        }\n        return newRow.filter((val)=>val !== 0);\n    }\n    moveLeft() {\n        let moved = false;\n        for(let row = 0; row < this.size; row++){\n            const oldRow = [\n                ...this.board[row]\n            ];\n            const newRow = this.slideAndMergeRow(oldRow);\n            this.board[row] = [\n                ...newRow,\n                ...Array(this.size - newRow.length).fill(0)\n            ];\n            if (!moved && oldRow.toString() !== this.board[row].toString()) moved = true;\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.checkGameOver();\n        }\n    }\n    moveRight() {\n        this.board.forEach((row)=>row.reverse());\n        this.moveLeft();\n        this.board.forEach((row)=>row.reverse());\n    }\n    moveUp() {\n        this.rotateBoard(false);\n        this.moveLeft();\n        this.rotateBoard(true);\n    }\n    moveDown() {\n        this.rotateBoard(true);\n        this.moveLeft();\n        this.rotateBoard(false);\n    }\n    checkGameOver() {\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this.board[row][col] === 2048) {\n                this.status = \"win\";\n                return;\n            }\n        }\n        if (!this.canMove()) this.status = \"lose\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        switch(e.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$updateUI();\n    }\n});\nfunction $09e991522ca7e64e$var$updateUI() {\n    const gameBoard = $09e991522ca7e64e$var$game.getState();\n    const scoreDisplay = document.querySelector(\".game-score\");\n    scoreDisplay.textContent = $09e991522ca7e64e$var$game.getScore();\n    const cells = document.querySelectorAll(\".field-cell\");\n    let cellIndex = 0;\n    for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n        const value = gameBoard[row][col];\n        const cell = cells[cellIndex];\n        cell.className = \"field-cell\";\n        if (value > 0) {\n            cell.classList.add(`field-cell--${value}`);\n            cell.textContent = value;\n        } else cell.textContent = \"\";\n        cellIndex++;\n    }\n    const winMessage = document.querySelector(\".message-win\");\n    const loseMessage = document.querySelector(\".message-lose\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") winMessage.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") loseMessage.classList.remove(\"hidden\");\n}\ndocument.querySelector(\".button.start\").addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\" || $09e991522ca7e64e$var$game.getStatus() !== \"playing\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateUI();\n        document.querySelector(\".message-start\").classList.add(\"hidden\");\n        document.querySelector(\".button.start\").classList.add(\"restart\");\n    }\n});\n\n\n//# sourceMappingURL=index.93fddd47.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n    updateUI();\n  }\n});\n\nfunction updateUI() {\n  const gameBoard = game.getState();\n  const scoreDisplay = document.querySelector('.game-score');\n\n  scoreDisplay.textContent = game.getScore();\n\n  const cells = document.querySelectorAll('.field-cell');\n  let cellIndex = 0;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const value = gameBoard[row][col];\n      const cell = cells[cellIndex];\n\n      cell.className = 'field-cell';\n\n      if (value > 0) {\n        cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value;\n      } else {\n        cell.textContent = '';\n      }\n      cellIndex++;\n    }\n  }\n\n  const winMessage = document.querySelector('.message-win');\n  const loseMessage = document.querySelector('.message-lose');\n\n  if (game.getStatus() === 'win') {\n    winMessage.classList.remove('hidden');\n  } else if (game.getStatus() === 'lose') {\n    loseMessage.classList.remove('hidden');\n  }\n}\n\ndocument.querySelector('.button.start').addEventListener('click', () => {\n  if (game.getStatus() === 'idle' || game.getStatus() !== 'playing') {\n    game.restart();\n    updateUI();\n    document.querySelector('.message-start').classList.add('hidden');\n    document.querySelector('.button.start').classList.add('restart');\n  }\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState = null) {\n    this.size = 4;\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: this.size }, () => Array(this.size).fill(0));\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [row, col] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      const newTile = Math.random() < 0.9 ? 2 : 4;\n\n      this.board[row][col] = newTile;\n    }\n  }\n\n  restart() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile(); // Add two tiles at the start\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.restart();\n    }\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  canMove() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          return true;\n        }\n\n        if (\n          col < this.size - 1 &&\n          this.board[row][col] === this.board[row][col + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          row < this.size - 1 &&\n          this.board[row][col] === this.board[row + 1][col]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  rotateBoard(clockwise = true) {\n    const newBoard = this.createEmptyBoard();\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (clockwise) {\n          newBoard[col][this.size - row - 1] = this.board[row][col];\n        } else {\n          newBoard[this.size - col - 1][row] = this.board[row][col];\n        }\n      }\n    }\n    this.board = newBoard;\n  }\n\n  slideAndMergeRow(row) {\n    const newRow = row.filter((val) => val !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        this.score += newRow[i];\n      }\n    }\n\n    return newRow.filter((val) => val !== 0);\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const oldRow = [...this.board[row]];\n      const newRow = this.slideAndMergeRow(oldRow);\n\n      this.board[row] = [\n        ...newRow,\n        ...Array(this.size - newRow.length).fill(0),\n      ];\n\n      if (!moved && oldRow.toString() !== this.board[row].toString()) {\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameOver();\n    }\n  }\n\n  moveRight() {\n    this.board.forEach((row) => row.reverse());\n    this.moveLeft();\n    this.board.forEach((row) => row.reverse());\n  }\n\n  moveUp() {\n    this.rotateBoard(false);\n    this.moveLeft();\n    this.rotateBoard(true);\n  }\n\n  moveDown() {\n    this.rotateBoard(true);\n    this.moveLeft();\n    this.rotateBoard(false);\n  }\n\n  checkGameOver() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 2048) {\n          this.status = 'win';\n\n          return;\n        }\n      }\n    }\n\n    if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","board","createEmptyBoard","score","status","Array","from","length","fill","addRandomTile","emptyCells","i","j","push","row","col","Math","floor","random","newTile","restart","start","getState","getScore","getStatus","canMove","rotateBoard","clockwise","newBoard","slideAndMergeRow","newRow","filter","val","moveLeft","moved","oldRow","toString","checkGameOver","moveRight","forEach","reverse","moveUp","moveDown","$09e991522ca7e64e$var$updateUI","gameBoard","scoreDisplay","document","querySelector","textContent","cells","querySelectorAll","cellIndex","value","cell","className","classList","add","winMessage","loseMessage","remove","addEventListener","e","key"],"version":3,"file":"index.93fddd47.js.map"}